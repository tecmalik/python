<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="ffa91b59-6b73-482e-93d1-1eca3c1c5c3b" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/television/television/__init__.py" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/television/test/test/__init__.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/classtask/countriesfunction.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/classtask/dictionaries/getcitysandpopulation.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/classtask/getcitysandpopulation2.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/classtask/getnumberofoddandevenfunction.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/dsa/myarray.py" beforeDir="false" afterPath="$PROJECT_DIR$/datastructures/dsa/myarray.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/dsa/myarraylist.py" beforeDir="false" afterPath="$PROJECT_DIR$/datastructures/dsa/myarraylist.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/dsa/myset.py" beforeDir="false" afterPath="$PROJECT_DIR$/datastructures/dsa/myset.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/test/dsa/testmyarray.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/test/dsa/testmyarraylist.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/test/dsa/testmyhashmap.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/test/dsa/testmylinkedlist.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/test/dsa/testmyqueue.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/test/dsa/testmyset.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/datastructures/test/dsa/testmystack.py" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/television/television.py" beforeDir="false" afterPath="$PROJECT_DIR$/television/television/television.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/television/test/testtelevision.py" beforeDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Unit Test" />
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2s7B6ZM7HqNZUPMDjPudCnK865t" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Python tests.Python tests for diarytest.diary_test.Diary.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_That_my_diary_can_update_entry.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_That_my_diary_will_raise_error_for_Invalid_update.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_find_by_id_will_raise_error_when_diary_is_locked.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_i_can_Create_an_entry_in_diary.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_can_be_locked.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_can_be_unlocked.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_can_create_multiple_entry.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_can_delete_Entry.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_can_find_by_id_entry_by_id.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_can_raise_error_for_update_when_my_diary_is_locked.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_can_raise_error_to_find_invalid_id_entry.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_is_Locked.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_is_locked.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_raises_an_error_for_no_input.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_will_raise_error_for_invalid_id.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_diary_will_raise_error_if_diary_is_locked.executor": "Run",
    "Python tests.Python tests for diarytest.diary_test.Diary.test_that_my_eill_throw_an_error_fo_incorrect_details.executor": "Run",
    "Python tests.Python tests for diarytest.test_diaries.MyTestCase.executor": "Run",
    "Python tests.Python tests for diarytest.test_diaries.MyTestCase.test_that_diary_.executor": "Run",
    "Python tests.Python tests for diarytest.test_diaries.MyTestCase.test_that_i_can_find_my_diary_by_username_in_diries.executor": "Run",
    "Python tests.Python tests for diarytest.test_diaries.MyTestCase.test_that_my_diaries_can_contain_more_than_a_diary.executor": "Run",
    "Python tests.Python tests for diarytest.test_diaries.MyTestCase.test_that_my_diaries_can_contain_my_diary.executor": "Run",
    "Python tests.Python tests for dsa.test_myArrylist.MySetTest.test_if_my_array_list_can_add_x_y_and_remove_y_element.executor": "Run",
    "Python tests.Python tests for dsa.test_myarraylist.MySetTest.test_if_my_array_list_can_add_g_h_i_clear_my_list.executor": "Run",
    "Python tests.Python tests for dsa.test_myarraylist.MySetTest.test_if_my_array_list_can_return_a_size.executor": "Run",
    "Python tests.Python tests for dsa.test_myarraylist.MySetTest.test_if_my_array_list_can_return_error_message_if_remove_item_not_found.executor": "Run",
    "Python tests.Python tests for dsa.test_myset.MySetTest.test_if_mySet_can_clear.executor": "Run",
    "Python tests.Python tests for dsa.test_myset.MySetTest.test_if_mySet_can_contain_more_value.executor": "Run",
    "Python tests.Python tests for dsa.test_myset.MySetTest.test_if_mySet_can_remove_an_element.executor": "Run",
    "Python tests.Python tests for dsa.test_myset.MySetTest.test_if_mySet_contains_an_element.executor": "Run",
    "Python tests.Python tests for dsa.test_myset.MySetTest.test_if_mySet_is_not_empty.executor": "Run",
    "Python tests.Python tests for dsa.test_myset.MySetTest.test_if_myset_wont_add_duplicate.executor": "Run",
    "Python tests.Python tests for my_data_structures.test_my_data_structures.MyArray.test_something.executor": "Run",
    "Python tests.Python tests for my_data_structures.test_my_data_structures.MyTestCase.test_something.executor": "Run",
    "Python tests.Python tests for mydatastructures.myarray.MyArray.test_something.executor": "Run",
    "Python tests.Python tests for mydatastructures.test_myarray.MyArray.test_something.executor": "Run",
    "Python tests.Python tests for test.test_television.MyTelevision.executor": "Run",
    "Python tests.Python tests for test.test_television.MyTelevision.test_that_television_can_chanel_down.executor": "Run",
    "Python tests.Python tests for test.test_television.MyTelevision.test_that_television_can_set_chanel.executor": "Run",
    "Python tests.Python tests for test_encrypt_text.EncryptTextROT13.test_if_encrypt_function_returns_a_correct_string_value.executor": "Run",
    "Python tests.Python tests for test_myArrylist.MySetTest.test_if_my_array_list_can_check_if_my_list_contains_x.executor": "Run",
    "Python tests.Python tests for test_myArrylist.MySetTest.test_if_myset_can_add_x_y_and_remove_y_element.executor": "Run",
    "Python tests.Python tests for test_myArrylist.MySetTest.test_if_myset_can_gret_items_using_index.executor": "Run",
    "Python tests.Python tests for test_myArrylist.MySetTest.test_if_myset_can_return_a_size.executor": "Run",
    "Python tests.Python tests for test_myArrylist.MySetTest.test_if_myset_can_return_error_message_if_remove_item_not_found.executor": "Run",
    "Python tests.Python tests for test_myArrylist.MySetTest.test_if_myset_is_empty.executor": "Run",
    "Python tests.Python tests for test_myArrylist.MySetTest.test_if_myset_is_not_empty.executor": "Run",
    "Python tests.Python tests for test_my_data_structures.MyArray.test_something.executor": "Run",
    "Python tests.Python tests for test_my_data_structures.MyArrayTest.executor": "Run",
    "Python tests.Python tests for test_my_data_structures.MyArrayTest.test_if_my_array_is_not_empty.executor": "Run",
    "Python tests.Python tests for test_my_data_structures.MyArrayTest.test_if_myarray_has_a_size.executor": "Run",
    "Python tests.Python tests for test_my_data_structures.MyArrayTest.test_if_myarray_of_length_2_will_append_only_2_element.executor": "Run",
    "Python tests.Python tests for test_my_data_structures.MyArrayTest.test_if_myarray_of_length_3_will_append_2_element_and_return_3.executor": "Run",
    "Python tests.Python tests for test_my_data_structures.MyArrayTest.test_something.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_if_my_television_is_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_my_television_cannot_decrease_volume_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_my_television_cannot_increase_volume_above_100_when_on.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_can_be_un_muted.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_can_chanel_down.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_can_change_my_channel_.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_can_set_chanel.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_cannot_change_up_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_cannot_channel_down_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_cannot_channel_up_when_its_at_channel_10.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_raises_an_error_to_decrease_volume_below_0.executor": "Run",
    "Python tests.Python tests for test_television.MyTelevision.test_that_television_raises_an_error_to_increase_volume_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_if_my_television_can_on.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_if_my_television_is_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_something.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_i_can_turn_on_and_off_my_television.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_my_television_can_increase_volume.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_my_television_cannot_decrease_volume_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_my_television_cannot_increase_volume_above_100_when_on.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_my_television_cannot_increase_volume_only_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_my_volume_can_be_muted.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_television_can_be_unmuted.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_television_raises_an_error_to_decrease_volume_below_0.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_television_raises_an_error_to_increase_volume_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_television_raises_an_error_to_mute_volume_when_off.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_television_return_back_to_the_actual_value_when_unmuted.executor": "Run",
    "Python tests.Python tests for test_television.MyTestCase.test_that_television_volume_can_be_decreased.executor": "Run",
    "Python tests.Python tests for testtelevision.MyTelevision.executor": "Run",
    "Python.myset.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "git-widget-placeholder": "main",
    "ignore.virus.scanning.warn.message": "true",
    "last_opened_file_path": "C:/Users/DELL/Documents/tecmalik-Git-Repo/python class/python",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\DELL\Documents\tecmalik-Git-Repo\python class\python\television\test\test" />
      <recent name="C:\Users\DELL\Documents\tecmalik-Git-Repo\python class\python\television\television" />
      <recent name="C:\Users\DELL\Documents\tecmalik-Git-Repo\python class\python\television\test" />
      <recent name="C:\Users\DELL\Documents\tecmalik-Git-Repo\python class\python\television" />
      <recent name="C:\Users\DELL\Documents\tecmalik-Git-Repo\python class\python\data_structures\dsa" />
    </key>
  </component>
  <component name="RunManager" selected="Python tests.Python tests for test.test_television.MyTelevision.test_that_television_can_set_chanel">
    <configuration name="Python tests for test.test_television.MyTelevision" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="python" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/television/test" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;test.test_television.MyTelevision&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for test.test_television.MyTelevision.test_if_my_television_is_off" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="python" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/television/test" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;test.test_television.MyTelevision.test_if_my_television_is_off&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for test.test_television.MyTelevision.test_that_television_can_chanel_down" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="python" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/television/test" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;test.test_television.MyTelevision.test_that_television_can_chanel_down&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for test.test_television.MyTelevision.test_that_television_can_set_chanel" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="python" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/television/test" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;test.test_television.MyTelevision.test_that_television_can_set_chanel&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <configuration name="Python tests for testtelevision.MyTelevision" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
      <module name="python" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/television/test" />
      <option name="IS_MODULE_SDK" value="true" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="_new_additionalArguments" value="&quot;&quot;" />
      <option name="_new_target" value="&quot;testtelevision.MyTelevision&quot;" />
      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Python tests.Python tests for test.test_television.MyTelevision.test_that_television_can_set_chanel" />
        <item itemvalue="Python tests.Python tests for test.test_television.MyTelevision.test_that_television_can_chanel_down" />
        <item itemvalue="Python tests.Python tests for test.test_television.MyTelevision" />
        <item itemvalue="Python tests.Python tests for testtelevision.MyTelevision" />
        <item itemvalue="Python tests.Python tests for test.test_television.MyTelevision.test_if_my_television_is_off" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-js-predefined-d6986cc7102b-deb605915726-JavaScript-PY-243.22562.220" />
        <option value="bundled-python-sdk-0fc6c617c4bd-9a18a617cbe4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.22562.220" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="ffa91b59-6b73-482e-93d1-1eca3c1c5c3b" name="Changes" comment="" />
      <created>1737796557764</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1737796557764</updated>
      <workItem from="1737796562153" duration="1018000" />
      <workItem from="1737873648155" duration="24057000" />
      <workItem from="1737973444701" duration="2041000" />
      <workItem from="1738133322556" duration="9465000" />
      <workItem from="1738515574471" duration="508000" />
      <workItem from="1738516551445" duration="11661000" />
      <workItem from="1738534718921" duration="90000" />
      <workItem from="1738535039757" duration="8463000" />
      <workItem from="1738600540195" duration="1184000" />
      <workItem from="1738693867870" duration="3100000" />
      <workItem from="1738749351203" duration="18572000" />
      <workItem from="1739448992402" duration="4265000" />
      <workItem from="1739456416400" duration="475000" />
      <workItem from="1739460297661" duration="1801000" />
      <workItem from="1739463789907" duration="1764000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/python$myset.coverage" NAME="myset Coverage Results" MODIFIED="1738166814498" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/data_structures/dsa" />
    <SUITE FILE_PATH="coverage/python$.coverage" NAME=" Coverage Results" MODIFIED="1739465189376" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/television/test" />
  </component>
</project>